{"version":3,"file":"static/js/610.469ffddd.chunk.js","mappings":"0MACMA,EAAY,WAAiB,IAAhBC,EAAK,uDAAG,CAAC,EAC1B,EAAuDA,EAA/CC,KAAAA,OAAI,MAAG,GAAE,IAAsCD,EAApCE,MAAAA,OAAK,MAAG,GAAE,IAA0BF,EAAxBG,SAAAA,OAAQ,MAAG,SAAQ,EAClD,MAAO,CACLF,KAAAA,EACAC,MAAAA,EACAC,SAAAA,EAEJ,EAEMC,EAAYC,EAAAA,KAAaC,MAAM,CAWnC,G,mGCLa,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACEC,EAAAA,EAAAA,IAAYC,EAAAA,IAAvBC,OACR,OACE,SAAC,KAAM,CACLC,cAAehB,EAAU,CAAC,GAC1BiB,iBAAkBZ,EAClBa,SAAU,SAACC,EAAQC,GACjBX,GACEY,EAAAA,EAAAA,IAAQ,CACNC,YAAa,gBACbC,WAAY,CACVC,OAAQ,OACRC,KAAMC,KAAKC,UAAU3B,EAAUmB,KAEjCS,OAAQ,WAGd,EAAE,SAED,SAACC,GAAK,OACL,iBAAMX,SAAUW,EAAMC,aAAa,UACjC,SAACC,EAAA,EAAK,CACJC,OAAO,QACPC,MAAM,QACNC,eAAe,SACfC,WAAW,SAAQ,UAEnB,UAACJ,EAAA,EAAK,CACJK,QAAS,EACTH,MAAO,IACPI,EAAG,EACHC,UAAWC,EAAAA,EACXC,QAAQ,WAAU,WAElB,UAACT,EAAA,EAAK,YACJ,SAACU,EAAA,EAAU,CAACC,GAAI,CAAEC,GAAI,IAAM,yBAC5B,SAACC,EAAA,EAAS,CACRC,WAAW,EACX3C,KAAK,OACL4C,YAAY,aACZC,SAAUlB,EAAMmB,aAChBC,OAAQpB,EAAMqB,WACdC,MAAOtB,EAAMV,OAAOjB,KACpBkD,WAAS,IAEVvB,EAAMwB,QAAQnD,MAAQ2B,EAAMyB,OAAOpD,OAClC,SAACqD,EAAA,EAAc,CAACC,OAAK,WAAE3B,EAAMyB,OAAOpD,WAGxC,UAAC6B,EAAA,EAAK,YACJ,SAACU,EAAA,EAAU,CAACC,GAAI,CAAEC,GAAI,IAAM,4BAC5B,SAACC,EAAA,EAAS,CACRC,WAAW,EACX3C,KAAK,QACL4C,YAAY,gBACZC,SAAUlB,EAAMmB,aAChBC,OAAQpB,EAAMqB,WACdC,MAAOtB,EAAMV,OAAOhB,MACpBiD,WAAS,IAEVvB,EAAMwB,QAAQlD,OAAS0B,EAAMyB,OAAOnD,QACnC,SAACoD,EAAA,EAAc,CAACC,OAAK,WAAE3B,EAAMyB,OAAOnD,YAGxC,UAAC4B,EAAA,EAAK,YACJ,SAACU,EAAA,EAAU,CAACC,GAAI,CAAEC,GAAI,IAAM,uBAC5B,SAACC,EAAA,EAAS,CACRC,WAAW,EACX3C,KAAK,WACLuD,KAAK,WACLX,YAAY,iBACZC,SAAUlB,EAAMmB,aAChBC,OAAQpB,EAAMqB,WACdC,MAAOtB,EAAMV,OAAOf,SACpBgD,WAAS,IAEVvB,EAAMwB,QAAQjD,UAAYyB,EAAMyB,OAAOlD,WACtC,SAACmD,EAAA,EAAc,CAACC,OAAK,WAAE3B,EAAMyB,OAAOlD,eAGxC,UAAC2B,EAAA,EAAK,CAAC2B,UAAU,MAAMtB,QAAS,EAAE,WAChC,SAACuB,EAAA,EAAM,CAACnB,QAAQ,YAAYiB,KAAK,SAAQ,uBAGzC,SAACE,EAAA,EAAM,CAACnB,QAAQ,WAAWoB,QAAS,kBAAMjD,EAAS,SAAS,EAAC,4BAM9D,GAIf,C","sources":["pages/register/Schema.js","pages/register/Register.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nconst getSchema = (model = {}) => {\r\n  const { name = \"\", email = \"\", password = \"123456\" } = model;\r\n  return {\r\n    name,\r\n    email,\r\n    password,\r\n  };\r\n};\r\n\r\nconst validator = Yup.object().shape({\r\n  // email: Yup.string().required(\"email is required\").min(4,\"Minimum 4 characters\"),\r\n  // password: Yup.string()\r\n  //   .required(\"Please Enter your password\")\r\n  //   .min(1, \"Your password must be longer than 5 characters.\")\r\n  // .max(25)\r\n  // .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n  // .matches(\r\n  //   /^(?=.*[a-z])(?=.*[A-Z])/,\r\n  //   \"Must Contain One Uppercase, One Lowercase\"\r\n  // )\r\n  // .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\"),\r\n});\r\n\r\nexport { getSchema, validator };\r\n","import { Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { getSchema, validator } from \"./Schema\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { callApi, selectApi } from \"../../reducers/apiSlice\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormHelperText,\r\n  InputLabel,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function Register() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { signUp } = useSelector(selectApi);\r\n  return (\r\n    <Formik\r\n      initialValues={getSchema({})}\r\n      validationSchema={validator}\r\n      onSubmit={(values, actions) => {\r\n        dispatch(\r\n          callApi({\r\n            operationId: \"auth/register\",\r\n            parameters: {\r\n              method: \"POST\",\r\n              body: JSON.stringify(getSchema(values)),\r\n            },\r\n            output: \"signUp\",\r\n          })\r\n        );\r\n      }}\r\n    >\r\n      {(props) => (\r\n        <form onSubmit={props.handleSubmit}>\r\n          <Stack\r\n            height=\"100vh\"\r\n            width=\"100vw\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Stack\r\n              spacing={2}\r\n              width={400}\r\n              p={4}\r\n              component={Paper}\r\n              variant=\"outlined\"\r\n            >\r\n              <Stack>\r\n                <InputLabel sx={{ mb: 0.5 }}>ENTER NAME</InputLabel>\r\n                <TextField\r\n                  autoFocus={true}\r\n                  name=\"name\"\r\n                  placeholder=\"EMAIL NAME\"\r\n                  onChange={props.handleChange}\r\n                  onBlur={props.handleBlur}\r\n                  value={props.values.name}\r\n                  fullWidth\r\n                />\r\n                {props.touched.name && props.errors.name && (\r\n                  <FormHelperText error>{props.errors.name}</FormHelperText>\r\n                )}\r\n              </Stack>\r\n              <Stack>\r\n                <InputLabel sx={{ mb: 0.5 }}>EMAIL ADDRESS</InputLabel>\r\n                <TextField\r\n                  autoFocus={true}\r\n                  name=\"email\"\r\n                  placeholder=\"EMAIL ADDRESS\"\r\n                  onChange={props.handleChange}\r\n                  onBlur={props.handleBlur}\r\n                  value={props.values.email}\r\n                  fullWidth\r\n                />\r\n                {props.touched.email && props.errors.email && (\r\n                  <FormHelperText error>{props.errors.email}</FormHelperText>\r\n                )}\r\n              </Stack>\r\n              <Stack>\r\n                <InputLabel sx={{ mb: 0.5 }}>PASSWORD</InputLabel>\r\n                <TextField\r\n                  autoFocus={true}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"ENTER PASSWORD\"\r\n                  onChange={props.handleChange}\r\n                  onBlur={props.handleBlur}\r\n                  value={props.values.password}\r\n                  fullWidth\r\n                />\r\n                {props.touched.password && props.errors.password && (\r\n                  <FormHelperText error>{props.errors.password}</FormHelperText>\r\n                )}\r\n              </Stack>\r\n              <Stack direction=\"row\" spacing={2}>\r\n                <Button variant=\"contained\" type=\"submit\">\r\n                  REGISTER\r\n                </Button>\r\n                <Button variant=\"outlined\" onClick={() => navigate(\"/login\")}>\r\n                  LOGIN\r\n                </Button>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n"],"names":["getSchema","model","name","email","password","validator","Yup","shape","Register","dispatch","useDispatch","navigate","useNavigate","useSelector","selectApi","signUp","initialValues","validationSchema","onSubmit","values","actions","callApi","operationId","parameters","method","body","JSON","stringify","output","props","handleSubmit","Stack","height","width","justifyContent","alignItems","spacing","p","component","Paper","variant","InputLabel","sx","mb","TextField","autoFocus","placeholder","onChange","handleChange","onBlur","handleBlur","value","fullWidth","touched","errors","FormHelperText","error","type","direction","Button","onClick"],"sourceRoot":""}