{"version":3,"file":"static/js/976.98b1a9ef.chunk.js","mappings":"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","sources":["pages/customers/Schema.js","pages/customers/AddCustomer.js","pages/customers/DeleteCustomer.js","pages/customers/Customers.js"],"sourcesContent":["import * as Yup from \"yup\";\r\nconst getSchema = (model = {}) => {\r\n  let date = new Date();\r\n  let components = [date.getHours(), date.getMinutes().toString()];\r\n  const {\r\n    id = Math.random().toString(36).slice(-2) + components.join(\"\"),\r\n    name = \"\",\r\n    age = 21,\r\n    contactNumber = \"\",\r\n    gender = \"MALE\",\r\n  } = model;\r\n\r\n  return {\r\n    id,\r\n    name,\r\n    gender,\r\n    age,\r\n    contactNumber,\r\n  };\r\n};\r\n\r\nconst validator = Yup.object().shape({\r\n  id: Yup.string().required(\"Required\"),\r\n  name: Yup.string().required(\"Required\"),\r\n  gender: Yup.string().required(\"Required\"),\r\n  age: Yup.number().required(\"Required\"),\r\n  contactNumber: Yup.string().required(\"Required\"),\r\n});\r\n\r\nexport { getSchema, validator };\r\n","import React, { useEffect } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport {\r\n  Grid,\r\n  InputLabel,\r\n  Stack,\r\n  TextField,\r\n  Button,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { getSchema, validator } from \"./Schema\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { callApi, clearState, selectApi } from \"../../reducers/apiSlice\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst AddCustomer = ({ setOpen }) => {\r\n  const dispatch = useDispatch();\r\n  const CloseButton = () => {\r\n    return (\r\n      <IconButton\r\n        onClick={() => setOpen(false)}\r\n        sx={{ position: \"absolute\", right: 15, top: 15 }}\r\n      >\r\n        <CloseCircleFilled style={{ fontSize: \"20px\" }} />\r\n      </IconButton>\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={getSchema({})}\r\n        enableReinitialize\r\n        validationSchema={validator}\r\n        onSubmit={(values) => {\r\n          dispatch(\r\n            callApi({\r\n              operationId: \"api/customers\",\r\n              output: \"customerSaved\",\r\n              parameters: {\r\n                method: \"POST\",\r\n                body: JSON.stringify(getSchema(values)),\r\n              },\r\n            })\r\n          );\r\n        }}\r\n      >\r\n        {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={2} sx={{ p: 2 }}>\r\n              <CloseButton />\r\n              <Grid item lg={2}>\r\n                <Stack spacing={0.5}>\r\n                  <InputLabel>Id</InputLabel>\r\n                  <TextField\r\n                    id=\"id\"\r\n                    name=\"id\"\r\n                    placeholder=\"ID\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.id}\r\n                    fullWidth\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n              <Grid item lg={3}>\r\n                <Stack spacing={0.5}>\r\n                  <InputLabel>Name</InputLabel>\r\n                  <TextField\r\n                    autoFocus={true}\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"FULL NAME\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                    fullWidth\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n              <Grid item lg={1}>\r\n                <Stack spacing={0.5}>\r\n                  <InputLabel>Gender</InputLabel>\r\n                  <TextField\r\n                    id=\"gender\"\r\n                    name=\"gender\"\r\n                    placeholder=\"GENDER\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.gender}\r\n                    fullWidth\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n              <Grid item lg={1}>\r\n                <Stack spacing={0.5}>\r\n                  <InputLabel>AGe</InputLabel>\r\n                  <TextField\r\n                    id=\"age\"\r\n                    name=\"age\"\r\n                    placeholder=\"AGE\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.age}\r\n                    fullWidth\r\n                    type=\"number\"\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n              <Grid item lg={2}>\r\n                <Stack spacing={0.5}>\r\n                  <InputLabel>Contact Number</InputLabel>\r\n                  <TextField\r\n                    id=\"contactNumber\"\r\n                    name=\"contactNumber\"\r\n                    placeholder=\"MOBILE NUMBER\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.contactNumber}\r\n                    fullWidth\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n              <Grid item lg={2}>\r\n                <Stack\r\n                  direction=\"row\"\r\n                  justifyContent=\"flex-start\"\r\n                  alignItems=\"flex-end\"\r\n                  sx={{ height: \"100%\" }}\r\n                >\r\n                  <Button variant=\"contained\" color=\"info\" type=\"submit\">\r\n                    SAVE\r\n                  </Button>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCustomer;\r\n","import { DeleteOutlined } from \"@mui/icons-material\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { callApi, selectApi } from \"../../reducers/apiSlice\";\r\n\r\nconst DeleteProduct = ({ shouldDelete }) => {\r\n  const dispatch = useDispatch();\r\n  const { loading } = useSelector(selectApi);\r\n  return (\r\n    <IconButton\r\n      disabled={loading}\r\n      color=\"error\"\r\n      onClick={() =>\r\n        dispatch(\r\n          callApi({\r\n            operationId: `api/customers/${shouldDelete}`,\r\n            output: \"customerDeleted\",\r\n            parameters: {\r\n              method: \"DELETE\",\r\n            },\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <DeleteOutlined />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default DeleteProduct;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Dialog,\r\n  Typography,\r\n  Badge,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { callApi, selectApi } from \"../../reducers/apiSlice\";\r\nimport { addToCart } from \"../../reducers/cartSlice\";\r\nimport AddCustomer from \"./AddCustomer\";\r\nimport DeleteCustomer from \"./DeleteCustomer\";\r\nimport NoRowIcon from \"../../components/NoRowIcon\";\r\nimport CustomPagination from \"../../components/Pagination\";\r\n\r\nconst Customers = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    loading,\r\n    customers = {\r\n      data: [],\r\n    },\r\n    customerDeleted = {\r\n      data: { id: null },\r\n    },\r\n    customerSaved,\r\n  } = useSelector(selectApi);\r\n  useEffect(() => {\r\n    setTimeout(\r\n      () =>\r\n        dispatch(\r\n          callApi({\r\n            operationId: `api/customers`,\r\n            output: \"customers\",\r\n          })\r\n        ),\r\n      1000\r\n    );\r\n  }, [customerDeleted.data.id, customerSaved]);\r\n  const columns = [\r\n    {\r\n      field: \"id\",\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-2\",\r\n      headerName: \"ID\",\r\n      width: 50,\r\n      align: \"center\",\r\n      sortable: false,\r\n      headerAlign: \"center\",\r\n    },\r\n    {\r\n      field: \"name\",\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-3\",\r\n      headerName: \"CLIENT NAME\",\r\n      flex: 1,\r\n      headerAlign: \"left\",\r\n      sortable: false,\r\n    },\r\n    {\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-2\",\r\n      field: \"age\",\r\n      headerName: \"AGE\",\r\n      type: \"number\",\r\n      minWidth: 60,\r\n      headerAlign: \"center\",\r\n      sortable: false,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-3\",\r\n      field: \"contactNumber\",\r\n      headerName: \"CONTACT\",\r\n      type: \"text\",\r\n      minWidth: 120,\r\n      headerAlign: \"center\",\r\n      sortable: false,\r\n      align: \"left\",\r\n    },\r\n    {\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-2\",\r\n      field: \"gender\",\r\n      headerName: \"GENDER\",\r\n      type: \"text\",\r\n      minWidth: 120,\r\n      headerAlign: \"center\",\r\n      sortable: false,\r\n      align: \"center\",\r\n      renderCell: (params) => (\r\n        <Box\r\n          sx={{\r\n            m: 1,\r\n            pr: 1,\r\n            pl: 1,\r\n            bgcolor: \"primary.main\",\r\n            color: \"white\",\r\n            borderRadius: 5,\r\n            fontSize: 14,\r\n          }}\r\n        >\r\n          {params.value.toUpperCase()}\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n    {\r\n      minWidth: 120,\r\n      align: \"center\",\r\n      field: \"actions\",\r\n      headerName: \"ACTION\",\r\n      type: \"actions\",\r\n      headerClassName: \"top-header-1\",\r\n      cellClassName: \"top-header-3\",\r\n      renderCell: (params) => <DeleteCustomer shouldDelete={params.id} />,\r\n    },\r\n  ];\r\n  const [selectedOptions, setSelectedOptions] = React.useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleadd = () => {\r\n    let SelectedOptions = customers.data.filter(\r\n      (el) => selectedOptions.indexOf(el.id) + 1\r\n    );\r\n\r\n    return SelectedOptions.forEach((el) =>\r\n      dispatch(\r\n        addToCart({\r\n          ...el,\r\n          contactNumber: 0,\r\n          expiryDate: 0,\r\n          vatPerUnit: 0,\r\n          discountPerUnit: 0,\r\n          quantityOrdered: 1,\r\n          quantityReturned: 0,\r\n          discountTotal: 0,\r\n          discountReturned: 0,\r\n          vatTotal: 0,\r\n          vatReturned: 0,\r\n          subtotalOrdered: 0,\r\n          subtotalReturned: 0,\r\n          rowTotal: 0,\r\n          returnedBy: \"string\",\r\n          returnDate: \"2022-11-13T11:35:33.765Z\",\r\n        })\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      elevation={1}\r\n      sx={{ pt: 2, pb: 2, width: \"100%\", bgcolor: \"#f5f9f0\" }}\r\n    >\r\n      <Stack direction=\"row\">\r\n        <Button\r\n          sx={{ mb: 2, ml: 2, width: 200 }}\r\n          variant=\"contained\"\r\n          onClick={() => setOpen(true)}\r\n        >\r\n          Add New Customer\r\n        </Button>\r\n        <Button\r\n          sx={{ mb: 2, ml: 2, width: 200 }}\r\n          disabled={selectedOptions.length !== 1}\r\n          variant=\"contained\"\r\n          color=\"warning\"\r\n          onClick={() => handleadd()}\r\n        >\r\n          {selectedOptions.length ? \"Bill to customer\" : \"Select Customer\"}\r\n        </Button>\r\n        <Dialog open={open} onClose={() => setOpen(!open)}>\r\n          <AddCustomer setOpen={setOpen} />\r\n        </Dialog>\r\n      </Stack>\r\n      <DataGrid\r\n        sx={{ mr: 2, ml: 2, height: 400 }}\r\n        getRowId={(row) => row._id}\r\n        checkboxSelection={true}\r\n        rows={customers.data}\r\n        columns={columns}\r\n        pageSize={10}\r\n        disableSelectionOnClick\r\n        disableColumnSelector\r\n        components={{\r\n          NoRowsOverlay: NoRowIcon,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        headerHeight={55}\r\n        disableColumnMenu\r\n        density=\"compact\"\r\n        showCellRightBorder={true}\r\n        showColumnRightBorder={true}\r\n        onSelectionModelChange={(newSelectionModel) => {\r\n          setSelectedOptions(newSelectionModel);\r\n        }}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n"],"names":["getSchema","model","date","Date","components","getHours","getMinutes","toString","id","Math","random","slice","join","name","age","contactNumber","gender","validator","Yup","shape","required","setOpen","dispatch","useDispatch","CloseButton","IconButton","onClick","sx","position","right","top","CloseCircleFilled","style","fontSize","initialValues","enableReinitialize","validationSchema","onSubmit","values","callApi","operationId","output","parameters","method","body","JSON","stringify","handleChange","handleBlur","handleSubmit","Grid","container","spacing","p","item","lg","Stack","InputLabel","TextField","placeholder","onChange","onBlur","value","fullWidth","autoFocus","type","direction","justifyContent","alignItems","height","Button","variant","color","shouldDelete","loading","useSelector","selectApi","disabled","DeleteOutlined","customers","data","customerDeleted","customerSaved","useEffect","setTimeout","columns","field","headerClassName","cellClassName","headerName","width","align","sortable","headerAlign","flex","minWidth","renderCell","params","Box","m","pr","pl","bgcolor","borderRadius","toUpperCase","DeleteCustomer","React","selectedOptions","setSelectedOptions","open","Paper","elevation","pt","pb","mb","ml","length","filter","el","indexOf","forEach","addToCart","expiryDate","vatPerUnit","discountPerUnit","quantityOrdered","quantityReturned","discountTotal","discountReturned","vatTotal","vatReturned","subtotalOrdered","subtotalReturned","rowTotal","returnedBy","returnDate","Dialog","onClose","DataGrid","mr","getRowId","row","_id","checkboxSelection","rows","pageSize","disableSelectionOnClick","disableColumnSelector","NoRowsOverlay","NoRowIcon","Pagination","CustomPagination","headerHeight","disableColumnMenu","density","showCellRightBorder","showColumnRightBorder","onSelectionModelChange","newSelectionModel"],"sourceRoot":""}